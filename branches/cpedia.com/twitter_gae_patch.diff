Index: twitter.py
===================================================================
--- twitter.py	(revision 136)
+++ twitter.py	(working copy)
@@ -25,7 +25,17 @@
 import md5
 import os
 import rfc822
-import simplejson
+try:
+  import json as simplejson #Python >= 2.6
+except ImportError:
+  try:
+    import simplejson #Python < 2.6
+  except ImportError:
+    try:
+      from django.utils import simplejson #Google App Engine
+    except ImportError:
+      raise ImportError, "Can't load a json library"
+
 import sys
 import tempfile
 import textwrap
@@ -33,6 +43,10 @@
 import urllib
 import urllib2
 import urlparse
+try:
+  from google.appengine.api import memcache
+except ImportError:
+  memcache = None
 
 
 CHARACTER_LIMIT = 140
@@ -1285,7 +1299,11 @@
       input_encoding: The encoding used to encode input strings. [optional]
       request_header: A dictionary of additional HTTP request headers. [optional]
     '''
-    self._cache = _FileCache()
+    try:
+      self._cache = _FileCache()
+    except:
+      if memcache:
+        self._cache = _MemCache()
     self._urllib = urllib2
     self._cache_timeout = Api.DEFAULT_CACHE_TIMEOUT
     self._InitializeRequestHeaders(request_headers)
@@ -2104,3 +2122,28 @@
 
   def _GetPrefix(self,hashed_key):
     return os.path.sep.join(hashed_key[0:_FileCache.DEPTH])
+
+class _MemCache(object):
+  '''A cache implementation that uses memcache'''
+
+  def _GetCacheKey(self, key):
+    return 'twitter_' + key
+
+  def Get(self, key):
+    data = memcache.get(self._GetCacheKey(key))
+    if data is not None:
+      return data[0]
+    return None
+
+  def Set(self, key, data):
+    data = (data, time.time())
+    memcache.set(self._GetCacheKey(key), data)
+
+  def Remove(self, key):
+    memcache.delete(self._GetCacheKey(key))
+
+  def GetCachedTime(self,key):
+    data = memcache.get(self._GetCacheKey(key))
+    if data is not None:
+      return data[1]
+    return None
